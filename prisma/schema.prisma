// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(cuid())
  clerkId         String   @unique
  email           String   @unique
  displayName     String
  username        String?  @unique
  bio             String?
  avatarUrl       String?
  hasOnboarded    Boolean @default(false)
  
  // New onboarding fields
  occupation      String?
  ageGroup        String?
  interests       String[] // Array of interests
  hobbies         String[] // Non-tech interests
  
  // Social links
  linkedinUrl     String?
  githubUrl       String?
  twitterUrl      String?
  
  // Availability and preferences
  availableTimings String[] // e.g. ["evenings", "weekends"]
  motivations     String[] // Why they're here
  
  // Web3 fields
  walletAddress   String?  @unique
  walletSignature String?
  signatureHash   String?
  onboardingStatus String @default("incomplete") // incomplete, wallet_pending, complete
  
  skillProfiles   SkillProfile[]
  SessionsTaught  Session[] @relation("Taught Sessions")
  SessionsLearned Session[] @relation("Learned Sessions")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SkillProfile {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillName  String
  category   String    // e.g. "Programming", "Design", "Marketing"
  skillType  SkillType // TEACH or LEARN
  proficiency String?  // "Beginner", "Intermediate", "Expert"
  xp         Int       @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, skillName, skillType])
}

model Session {
  id         String   @id @default(cuid())
  skill      String
  teacher    User     @relation("Taught Sessions", fields: [teacherId], references: [id])
  teacherId  String
  learner    User     @relation("Learned Sessions", fields: [learnerId], references: [id])
  learnerId  String
  status     SessionStatus @default(PENDING)
  confirmedAt DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Badge {
  id         String   @id @default(cuid())
  name       String
  criteria   String
}

enum SessionStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum SkillType {
  TEACH
  LEARN
}
