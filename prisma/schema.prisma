// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id              String   @id @default(cuid())
  clerkId         String   @unique
  email           String   @unique
  name            String
  username        String   @unique
  password        String
  skillProfiles   SkillProfile[]
  bio             String?
  avatarUrl       String?

  SessionsTaught  Session[] @relation("Taught Sessions")
  SessionsLearned Session[] @relation("Learned Sessions")


  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


}


model SkillProfile{

  id         String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  skill       String
  xp         Int       @default(0)
  category   String    // e.g. "Technical", "Soft Skill", "Language"
  skillType  String    // e.g. "Programming", "Communication", "Design"

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, skill])
}


model Session{
  id         String   @id @default(cuid())
  skill    String
  teacher   User   @relation("Taught Sessions", fields: [teacherId], references: [id])
  teacherId String
  learner   User   @relation("Learned Sessions", fields: [learnerId], references: [id])
  learnerId String
  confirmedAt DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

 
}

model Badge{
  id         String   @id @default(cuid())
  name      String
  criteria String
}




enum SessionStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum SkillType{
  TEACH
  LEARN
}